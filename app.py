import os
from flask import Flask
from flask_restful import Api
from resources.item import Item

# Создание нового экземпляра класса Flask и присваивание его переменной "app"
# Параметр __name__ используется для указания Flask корневого пути приложения.
# Передавая __name__ в качестве аргумента, Flask знает, где искать шаблоны, статические файлы и другие ресурсы относительно текущего модуля.
app = Flask(__name__)

# Установка DEBUG в значение TRUE. Это включает режим отладки Flask.
app.config['DEBUG'] = True

# Здесь мы устанавливаем параметр конфигурации SQLALCHEMY_DATABASE_URI для нашего приложения Flask.
# Конфигурация позволяет устанавливать различные параметры и настройки для нашего приложения.
# В данном случае мы устанавливаем значение этой конфигурации равным результату выражения os.environ.get('DATABASE_URL', 'sqlite:///data.db').

# os.environ.get('DATABASE_URL', 'sqlite:///data.db') - это метод, который пытается получить значение переменной окружения 'DATABASE_URL'.
# Если такая переменная окружения существует, метод вернет ее значение. Если переменная окружения 'DATABASE_URL' не существует,
  # метод вернет значение 'sqlite:///data.db'.
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///data.db')
# Создание API
# Api(app) создает экземпляр класса Api и связывает его с нашим приложением "app".
# Теперь мы можем использовать объект "api" для определения маршрутов нашего API и указания, какие функции должны обрабатывать запросы.
api = Api(app)

# Этот код добавляет ресурс Item в API, который будет доступен по маршруту URL '/item/<string:name>'.
# '/item/<string:name>' - Это маршрут URL, к которому будет привязан ресурс Item.
# В этом маршруте есть переменная <string:name>, которая указывает, что после '/item/' ожидается параметр с именем в виде строки.
# Например, если вы отправите GET-запрос на '/item/apple', Flask-RESTful поймет, что apple - это значение параметра "name".
# '/item/<string:name>' - Какая структура конечных точек, позволяющая обращаться к определенному элементу в API
api.add_resource(Item, '/item/<string:name>')

# Когда мы выполняем ЭТОТ файл, мы импортируем объект базы данных (DataBase Connector)
# Это проверяет, равен ли встроенный атрибут __name__ строке '__main__'.
# Когда Python запускает программу напрямую (то есть не как модуль, импортированный в другой файл), он устанавливает атрибут __name__ в '__main__'.
# Таким образом, код, находящийся внутри этой проверки, будет выполняться только при запуске файла напрямую.
if __name__ == '__main__':
# Здесь мы импортируем объект db из модуля db. Это объект базы данных, определенный в другом файле db.py.
    from db import db

# Инициализация базы данных с нашим приложением Flask (10-я строка)
    db.init_app(app)

# Если мы в режиме отладки, мы создадим все таблицы, НО ТОЛЬКО ПЕРЕД ПЕРВЫМ ЗАПРОСОМ К ПРИЛОЖЕНИЮ
# Создание ВСЕХ таблиц и, наконец, запуск приложения на определенном порту
    if app.config['DEBUG']:
        @app.before_first_request
        def create_tables():
            db.create_all()

    app.run(port=5000)

